package dbflowdemo.lfo.com.dbflowdemo;

import android.os.Parcel;
import android.os.Parcelable;

import com.raizlabs.android.dbflow.annotation.Column;
import com.raizlabs.android.dbflow.annotation.PrimaryKey;
import com.raizlabs.android.dbflow.annotation.Table;
import com.raizlabs.android.dbflow.structure.BaseModel;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "MY_LEARN_ANSWER".
 */

@Table(database = ImorevDb.class)
public class MyLearnAnswer extends BaseModel implements Parcelable {

    @PrimaryKey(autoincrement = true)
      Long id;
    @Column
      Float centerX;
    @Column
      Float centerY;
    @Column
      Float width;
    @Column
      Float height;
    @Column
      String imagePath;//only temp save ig name
    @Column
      Float scaleX;
    @Column
      Float scaleY;
    @Column
      Float angle;
    @Column
      String AnswerImagePath;
    @Column
      Long updateTime;
    @Column
      Integer beforeCountDownSecond;
    @Column
      String checksum;
    @Column
      Boolean selfIsVisual;//Deprecated
    @Column
      long categoryId;
    @Column
      Long createTime;
    @Column
      Boolean selfIsVisualFree;
    @Column
      String freeCheckSum;
    @Column
      String altText;
    @Column
      Long myLearnAnswerImgId;
    @Column
      Integer myLearnAnswerType;



    public MyLearnAnswer() {
    }

      MyLearnAnswer(Builder builder) {
        id = builder.id;
        centerX = builder.centerX;
        centerY = builder.centerY;
        width = builder.width;
        height = builder.height;
        imagePath = builder.imagePath;
        scaleX = builder.scaleX;
        scaleY = builder.scaleY;
        angle = builder.angle;
        AnswerImagePath = builder.AnswerImagePath;
        updateTime = builder.updateTime;
        beforeCountDownSecond = builder.beforeCountDownSecond;
        checksum = builder.checksum;
        selfIsVisual = builder.selfIsVisual;
        categoryId = builder.categoryId;
        createTime = builder.createTime;
        selfIsVisualFree = builder.selfIsVisualFree;
        freeCheckSum = builder.freeCheckSum;
        altText = builder.altText;
        myLearnAnswerImgId = builder.myLearnAnswerImgId;
        myLearnAnswerType = builder.myLearnAnswerType;
    }


    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeValue(this.id);
        dest.writeValue(this.centerX);
        dest.writeValue(this.centerY);
        dest.writeValue(this.width);
        dest.writeValue(this.height);
        dest.writeString(this.imagePath);
        dest.writeValue(this.scaleX);
        dest.writeValue(this.scaleY);
        dest.writeValue(this.angle);
        dest.writeString(this.AnswerImagePath);
        dest.writeValue(this.updateTime);
        dest.writeValue(this.beforeCountDownSecond);
        dest.writeString(this.checksum);
        dest.writeValue(this.selfIsVisual);
        dest.writeLong(this.categoryId);
        dest.writeValue(this.createTime);
        dest.writeValue(this.selfIsVisualFree);
        dest.writeString(this.freeCheckSum);
        dest.writeString(this.altText);
        dest.writeValue(this.myLearnAnswerImgId);
        dest.writeValue(this.myLearnAnswerType);
    }

    protected MyLearnAnswer(Parcel in) {
        this.id = (Long) in.readValue(Long.class.getClassLoader());
        this.centerX = (Float) in.readValue(Float.class.getClassLoader());
        this.centerY = (Float) in.readValue(Float.class.getClassLoader());
        this.width = (Float) in.readValue(Float.class.getClassLoader());
        this.height = (Float) in.readValue(Float.class.getClassLoader());
        this.imagePath = in.readString();
        this.scaleX = (Float) in.readValue(Float.class.getClassLoader());
        this.scaleY = (Float) in.readValue(Float.class.getClassLoader());
        this.angle = (Float) in.readValue(Float.class.getClassLoader());
        this.AnswerImagePath = in.readString();
        this.updateTime = (Long) in.readValue(Long.class.getClassLoader());
        this.beforeCountDownSecond = (Integer) in.readValue(Integer.class.getClassLoader());
        this.checksum = in.readString();
        this.selfIsVisual = (Boolean) in.readValue(Boolean.class.getClassLoader());
        this.categoryId = in.readLong();
        this.createTime = (Long) in.readValue(Long.class.getClassLoader());
        this.selfIsVisualFree = (Boolean) in.readValue(Boolean.class.getClassLoader());
        this.freeCheckSum = in.readString();
        this.altText = in.readString();
        this.myLearnAnswerImgId = (Long) in.readValue(Long.class.getClassLoader());
        this.myLearnAnswerType = (Integer) in.readValue(Integer.class.getClassLoader());
    }

    public static final Creator<MyLearnAnswer> CREATOR = new Creator<MyLearnAnswer>() {
        @Override
        public MyLearnAnswer createFromParcel(Parcel source) {
            return new MyLearnAnswer(source);
        }

        @Override
        public MyLearnAnswer[] newArray(int size) {
            return new MyLearnAnswer[size];
        }
    };

    public static final class Builder {
        private Long id=null;
        private Float centerX=0F;
        private Float centerY=0F;
        private Float width=0F;
        private Float height=0F;
        private String imagePath="";
        private Float scaleX=0F;
        private Float scaleY=0F;
        private Float angle=0F;
        private String AnswerImagePath="";
        private Long updateTime=0L;
        private Integer beforeCountDownSecond=0;
        private String checksum="";
        private Boolean selfIsVisual=false;
        private long categoryId=0L;
        private Long createTime=0L;
        private Boolean selfIsVisualFree=false;
        private String freeCheckSum="";
        private String altText="";
        private Long myLearnAnswerImgId=0L;
        private Integer myLearnAnswerType=0;

        public Builder() {
        }

        public Builder id(Long val) {
            id = val;
            return this;
        }

        public Builder centerX(Float val) {
            centerX = val;
            return this;
        }

        public Builder centerY(Float val) {
            centerY = val;
            return this;
        }

        public Builder width(Float val) {
            width = val;
            return this;
        }

        public Builder height(Float val) {
            height = val;
            return this;
        }

        public Builder imagePath(String val) {
            imagePath = val;
            return this;
        }

        public Builder scaleX(Float val) {
            scaleX = val;
            return this;
        }

        public Builder scaleY(Float val) {
            scaleY = val;
            return this;
        }

        public Builder angle(Float val) {
            angle = val;
            return this;
        }

        public Builder AnswerImagePath(String val) {
            AnswerImagePath = val;
            return this;
        }

        public Builder updateTime(Long val) {
            updateTime = val;
            return this;
        }

        public Builder beforeCountDownSecond(Integer val) {
            beforeCountDownSecond = val;
            return this;
        }

        public Builder checksum(String val) {
            checksum = val;
            return this;
        }

        public Builder selfIsVisual(Boolean val) {
            selfIsVisual = val;
            return this;
        }

        public Builder categoryId(long val) {
            categoryId = val;
            return this;
        }

        public Builder createTime(Long val) {
            createTime = val;
            return this;
        }

        public Builder selfIsVisualFree(Boolean val) {
            selfIsVisualFree = val;
            return this;
        }

        public Builder freeCheckSum(String val) {
            freeCheckSum = val;
            return this;
        }

        public Builder altText(String val) {
            altText = val;
            return this;
        }

        public Builder myLearnAnswerImgId(Long val) {
            myLearnAnswerImgId = val;
            return this;
        }

        public Builder myLearnAnswerType(Integer val) {
            myLearnAnswerType = val;
            return this;
        }

        public MyLearnAnswer build() {
            return new MyLearnAnswer(this);
        }
    }
}
